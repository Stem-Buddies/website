<section class="w-full max-w-6xl mx-auto px-3">
  <div class="searchBoxContainer">
    <input
      type="text"
      id="searchBox"
      class="w-full px-2 py-1 border-2 border-black rounded-lg font-poppins"
      placeholder="Search..."
      data-test="search-input"
    />
  </div>

  <!-- Search Results -->
  <div id="searchResults" class="w-full pt-8 lg:pl-8 mt-12"></div>

  <!-- Search JS -->
  <script is:inline>
    let lunrIndex;
    let lunrResult;
    let pagesIndex;

    const bigramTokeniser = (obj, metadata) => {
      if (obj == null || obj == undefined) {
        return [];
      }

      let str = obj.toString().trim().toLowerCase();
      let tokens = [];

      for (let i = 0; i <= str.length - 2; i++) {
        let tokenMetadata = lunr.utils.clone(metadata) || {};
        tokenMetadata["position"] = [i, i + 2];
        tokenMetadata["index"] = tokens.length;
        tokens.push(new lunr.Token(str.slice(i, i + 2), tokenMetadata));
      }

      return tokens;
    };

    const queryNgramSeparator = (query) => {
      const str = query.toString().trim().toLowerCase();
      const tokens = [];

      for (let i = 0; i <= str.length - 2; i++) {
        tokens.push(str.slice(i, i + 2));
      }

      return tokens.join(" ");
    };

    const index = "/search-index.json";

    const initLunr = () => {
      let request = new XMLHttpRequest();
      request.open("GET", index, true);
      request.onload = function () {
        if (this.status >= 200 && this.status < 400) {
          pagesIndex = JSON.parse(this.response);
          lunrIndex = lunr(function () {
            this.tokenizer = bigramTokeniser;
            this.pipeline.reset();
            this.ref("slug");
            this.field("title", { boost: 10 });
            this.field("body");
            this.metadataWhitelist = ["position"];
            pagesIndex.forEach((page) => {
              this.add(page);
            }, this);
          });
        } else {
          console.error("Error getting search index file");
        }
      };
      request.onerror = function () {
        console.error("connection error");
      };
      request.send();
    };

    const search = (query) => {
      lunrResult = lunrIndex.search(queryNgramSeparator(query));
      return lunrResult.map((result) => {
        return pagesIndex.filter((page) => {
          return page.slug === result.ref;
        })[0];
      });
    };

    const initUI = () => {
      const searchBox = document.querySelector("#searchBox");
      if (searchBox === null) {
        return;
      }
      searchBox.addEventListener("keyup", function (event) {
        const searchResultsArea = document.querySelector("#searchResults");
        if (!searchResultsArea) return;

        const target = event.target;
        let query = target.value;

        // Only trigger a search when 2 chars. at least have been provided
        if (query.length < 2) {
          searchResultsArea.style.display = "none";
          return;
        }

        // Display search results
        renderResults(search(query));
        searchResultsArea.style.display = "block";
      });
    };

    const renderResults = (results) => {
      const searchResults = document.querySelector("#searchResults");
      if (!searchResults) return;

      const searchBox = document.querySelector("#searchBox");
      if (!searchBox) return;

      const query = searchBox.value;
      const BODY_LENGTH = 100;
      const MAX_PAGES = 10;

      // Debug: log results
      console.log("Search results:", results);

      // Clear search result
      while (searchResults.firstChild)
        searchResults.removeChild(searchResults.firstChild);

      // Show message when results is empty
      if (!results.length) {
        let resultPage = document.createElement("div");
        resultPage.className =
          "my-4 bg-white border border-black rounded-lg p-6 shadow-brutal flex flex-col gap-3";
        resultPage.innerHTML =
          '<div class="poppins text-lg">No results found for query "' +
          query +
          '"</div>';
        searchResults.append(resultPage);
        searchResults.style.display = "block";
        return;
      }

      searchResults.style.display = "block";

      let instance = new Mark(document.querySelector("#searchResults"));
      // Helper to strip markdown
      function stripMarkdown(text) {
        return text
          .replace(/[#*_`~\[\]>!-]/g, "") // remove markdown symbols
          .replace(/!\[[^\]]*\]\([^)]*\)/g, "") // remove images
          .replace(/\[[^\]]*\]\([^)]*\)/g, "") // remove links
          .replace(/\n+/g, " ") // newlines to space
          .replace(/\s+/g, " ") // collapse whitespace
          .trim();
      }

      // Only show the ten first results
      results.slice(0, MAX_PAGES).forEach((result, idx) => {
        let resultPage = document.createElement("div");
        resultPage.className =
          "my-4 bg-white border border-black rounded-lg p-6 shadow-brutal flex flex-col gap-4 transition-all duration-150 hover:shadow-brutal-lg";
        let metadata = lunrResult[idx].matchData.metadata;
        let matchPosition =
          metadata[Object.keys(metadata)[0]].body.position[0][0];
        let bodyStartPosition =
          matchPosition - BODY_LENGTH / 2 > 0
            ? matchPosition - BODY_LENGTH / 2
            : 0;

        let resultTitle = document.createElement("a");
        resultTitle.className =
          "text-black text-2xl md:text-3xl font-bold leading-tight no-underline dm-serif transition-colors duration-150 hover:text-[#fd2d78] hover:underline";
        resultTitle.href = `/blog/${result.slug}`;
        resultTitle.innerText = stripMarkdown(result.title);
        resultPage.append(resultTitle);

        let resultBody = document.createElement("div");
        resultBody.className =
          "text-gray-700 text-base poppins leading-relaxed";
        resultBody.innerText = stripMarkdown(
          result.body.substr(bodyStartPosition, BODY_LENGTH)
        );
        resultPage.append(resultBody);
        searchResults.append(resultPage);

        instance.mark(query);
      });
    };

    initLunr();
    initUI();
  </script>

  <script is:inline>
    document.getElementById("searchBox")?.focus();
  </script>
</section>
